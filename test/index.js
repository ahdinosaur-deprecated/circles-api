// Generated by CoffeeScript 1.7.1
(function() {
  var app, bestGroup, context, db, expect, graphdb, group, request, urlencode;

  request = require("supertest");

  expect = require("chai").expect;

  urlencode = require("urlencode");

  context = require('../lib/context');

  app = void 0;

  db = void 0;

  graphdb = void 0;

  group = {
    '@id': "http://circles.app.enspiral.com/loomiocommunity",
    '@type': "foaf:group",
    prefixID: "circles:loomiocommunity",
    shortID: "loomiocommunity",
    name: "Loomio Community",
    members: [
      {
        "@id": "people:aaronthornton"
      }, {
        "@id": "people:simontegg"
      }
    ]
  };

  bestGroup = {
    id: "http://circles.app.enspiral.com/bestgroup",
    name: "Best Group"
  };

  describe("#groups", function() {
    before(function() {
      db = require("level-test")()("testdb");
      graphdb = require('levelgraph-jsonld')(require('levelgraph')(db));
      app = require('../')(db);
      request = request(app);
    });
    it("should POST /groups", function(done) {
      var body;
      body = void 0;
      return request.post("/groups").send(group).expect("Content-Type", /json/).expect(201).expect(function(req) {
        var prop;
        body = req.body[0];
        expect(body['@id']).to.equal("circles:loomiocommunity");
        delete body['@id'];
        for (prop in body) {
          expect(body).to.have.property(prop, group[prop]);
        }
      }).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return graphdb.jsonld.get(body.id, context, function(err, body) {
          var prop;
          if (err) {
            return done(err);
          }
          for (prop in body) {
            expect(body).to.have.property(prop, group[prop]);
          }
          return done();
        });
      });
    });
    it("should GET /groups", function(done) {
      return graphdb.jsonld.put(group, function(err) {
        expect(err).to.not.exist;
        return request.get("/groups").expect("Content-Type", /json/).expect(200).expect(function(req) {
          var body, prop;
          body = req.body;
          expect(body).to.have.length(1);
          for (prop in body[0]) {
            expect(body[0]).to.have.property(prop, body[0][prop]);
          }
        }).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
    it("should GET /groups/:id", function(done) {
      return graphdb.jsonld.put(group, function(err, obj) {
        expect(err).to.not.exist;
        return request.get("/groups/" + urlencode(obj['@id'])).expect("Content-Type", /json/).expect(200).expect(function(req) {
          var body, prop;
          body = req.body;
          for (prop in body) {
            expect(body).to.have.property(prop, body[prop]);
          }
        }).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
    it("should GET /groups/:prefix:id", function(done) {
      return graphdb.jsonld.put(group, function(err, obj) {
        expect(err).to.not.exist;
        return request.get("/groups/" + urlencode(obj['prefixID'])).expect("Content-Type", /json/).expect(200).expect(function(req) {
          var body, prop;
          body = req.body;
          for (prop in body) {
            expect(body).to.have.property(prop, body[prop]);
          }
        }).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
    it("should GET /groups/:shortID", function(done) {
      return graphdb.jsonld.put(group, function(err, obj) {
        expect(err).to.not.exist;
        return request.get("/groups/" + urlencode(obj['shortID'])).expect("Content-Type", /json/).expect(200).expect(function(req) {
          var body, prop;
          body = req.body;
          for (prop in body) {
            expect(body).to.have.property(prop, body[prop]);
          }
        }).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
    it("should PUT /groups/:id", function(done) {
      var body;
      body = void 0;
      return request.put("/groups/" + urlencode(group['@id'])).send(group).expect("Content-Type", /json/).expect(200).expect(function(req) {
        var prop;
        body = req.body;
        for (prop in body) {
          expect(body).to.have.property(prop, body[prop]);
        }
      }).end(function(err, res) {
        return graphdb.jsonld.get(body.id, context, function(err, body) {
          var prop;
          if (err) {
            return done(err);
          }
          for (prop in body) {
            expect(body).to.have.property(prop, group[prop]);
          }
          return done();
        });
      });
    });
    it("should DELETE /groups/:id", function(done) {
      return graphdb.jsonld.put(group, function(err, obj) {
        expect(err).to.not.exist;
        expect(obj).to.exist;
        return request.del("/groups/" + urlencode(group['@id'])).expect(204).end(function(err, res) {
          return graphdb.jsonld.get(obj['@id'], context, function(err, body) {
            expect(err).to.not.exist;
            expect(body).to.not.exist;
            return done();
          });
        });
      });
    });
    afterEach(function(done) {
      return db.createKeyStream().on('data', function(k) {
        return db.del(k);
      }).on('close', function() {
        return done();
      });
    });
    return this;
  });

}).call(this);
