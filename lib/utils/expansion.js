// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, addContext, addDefaultPrefix, expand, expandGroupID, expandSimpleQuery, expansion, extractPredicateAndObject, getKey, jsonld, pair, validator;

  jsonld = require("jsonld");

  Promise = require("bluebird");

  validator = require("validator");

  addContext = function(term, context, callback) {
    var doc;
    doc = {};
    doc[term] = term;
    doc['context'] = context;
    return callback(null, doc);
  };

  addDefaultPrefix = function(terms, context, callback) {
    var prefix;
    if (validator.isURL(terms[1])) {
      return callback(null, terms);
    } else if (terms[1].indexOf(':') === -1) {
      prefix = context[terms[0]]["defaultPrefix"];
      terms[1] = prefix + ":" + terms[1];
      return callback(null, terms);
    } else {
      return callback(null, terms);
    }
  };

  expandGroupID = function(id, context, callback) {
    var terms;
    terms = ["group", id];
    return expansion.addDefaultPrefix(terms, context).then(function(terms) {
      return expansion.addContext(terms[1], context);
    }).then(expand).then(function(expanded) {
      return expansion.getKey(expanded[0]);
    }).then(function(expandedIRI) {
      return callback(null, expandedIRI);
    });
  };

  expandSimpleQuery = function(query, context, callback) {
    return expansion.pair(query).then(function(terms) {
      return expansion.addDefaultPrefix(terms, context);
    }).map(function(term) {
      return expansion.addContext(term, context);
    }).map(function(doc) {
      return expand(doc);
    }).then(expandsion.extractPredicateAndObject).then(function(expanded) {
      var simpleQuery;
      simpleQuery = {
        subject: db.v('id'),
        predicate: expanded.predicate,
        object: expanded.object
      };
      return callback(null, simpleQuery);
    });
  };

  extractPredicateAndObject = function(terms, callback) {
    var expanded;
    expanded = {
      predicate: Object.keys(terms[0][0])[0],
      object: Object.keys(terms[1][0])[0]
    };
    return callback(null, expanded);
  };

  getKey = function(obj, callback) {
    var key;
    key = Object.keys(obj)[0];
    return callback(null, key);
  };

  pair = function(obj, callback) {
    var key, terms, value;
    key = Object.keys(obj)[0];
    value = obj[key];
    terms = [key, value];
    return callback(null, terms);
  };

  expand = Promise.promisify(jsonld.expand);

  expansion = {
    addContext: Promise.promisify(addContext),
    addDefaultPrefix: Promise.promisify(addDefaultPrefix),
    expandGroupID: Promise.promisify(expandGroupID),
    expandSimpleQuery: Promise.promisify(expandSimpleQuery),
    extractPredicateAndObject: Promise.promisify(extractPredicateAndObject),
    getKey: Promise.promisify(getKey),
    pair: Promise.promisify(pair)
  };

  module.exports = expansion;

}).call(this);
