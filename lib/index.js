// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, addContext, addDefaultPrefix, alias, compact, context, expand, expandGroupID, expandSimpleQuery, express, extractPredicateAndObject, getKey, hasType, initData, jsonld, levelgraph, levelgraphJsonld, pair, urlencode, validator, _;

  express = require("express");

  levelgraph = require("levelgraph");

  levelgraphJsonld = require("levelgraph-jsonld");

  urlencode = require("urlencode");

  validator = require("validator");

  Promise = require("bluebird");

  jsonld = require("jsonld");

  _ = Promise.promisifyAll(require("lodash"));

  initData = require("./initData");

  context = require("./context");

  alias = require("./utils/alias");

  hasType = require("./utils/hasType");

  addContext = function(term, context, callback) {
    var doc;
    doc = {};
    doc[term] = term;
    doc['@context'] = context;
    return callback(null, doc);
  };

  addDefaultPrefix = function(terms, context, callback) {
    var prefix;
    if (validator.isURL(terms[1])) {
      return callback(null, terms);
    } else if (terms[1].indexOf(':') === -1) {
      prefix = context[terms[0]]["defaultPrefix"];
      terms[1] = prefix + ":" + terms[1];
      return callback(null, terms);
    } else {
      return callback(null, terms);
    }
  };

  expandGroupID = function(id, context, callback) {
    var terms;
    terms = ["group", id];
    return addDefaultPrefix(terms, context).then(function(terms) {
      return addContext(terms[1], context);
    }).then(expand).then(function(expanded) {
      return getKey(expanded[0]);
    }).then(function(expandedIRI) {
      return callback(null, expandedIRI);
    });
  };

  expandSimpleQuery = function(query, context, callback) {
    return pair(query).then(function(terms) {
      return addDefaultPrefix(terms, context);
    }).map(function(term) {
      return addContext(term, context);
    }).map(function(doc) {
      return expand(doc);
    }).then(extractPredicateAndObject).then(function(expanded) {
      var simpleQuery;
      simpleQuery = {
        subject: db.v('@id'),
        predicate: expanded.predicate,
        object: expanded.object
      };
      return callback(null, simpleQuery);
    });
  };

  extractPredicateAndObject = function(terms, callback) {
    var expanded;
    expanded = {
      predicate: Object.keys(terms[0][0])[0],
      object: Object.keys(terms[1][0])[0]
    };
    return callback(null, expanded);
  };

  getKey = function(obj, callback) {
    var key;
    key = Object.keys(obj)[0];
    return callback(null, key);
  };

  pair = function(obj, callback) {
    var key, terms, value;
    key = Object.keys(obj)[0];
    value = obj[key];
    terms = [key, value];
    return callback(null, terms);
  };

  addContext = Promise.promisify(addContext);

  addDefaultPrefix = Promise.promisify(addDefaultPrefix);

  compact = Promise.promisify(jsonld.compact);

  expand = Promise.promisify(jsonld.expand);

  expandGroupID = Promise.promisify(expandGroupID);

  expandSimpleQuery = Promise.promisify(expandSimpleQuery);

  extractPredicateAndObject = Promise.promisify(extractPredicateAndObject);

  getKey = Promise.promisify(getKey);

  pair = Promise.promisify(pair);

  module.exports = function(db) {
    var app, create, find, get, getMembers, remove, update;
    app = express();
    db = levelgraphJsonld(levelgraph(db));
    app.use(require("body-parser")());
    find = function(query, callback) {
      return db.search(query, function(error, groups) {
        if (error) {
          return callback(error);
        } else {
          return callback(null, groups);
        }
      });
    };
    create = function(data, params, callback) {
      data = alias(data, "type", "@type");
      data = hasType(data, "foaf:group");
      data = alias(data, "id", "@id");
      return db.jsonld.put(data, function(error, group) {
        if (error) {
          return callback(error);
        }
        return compact(group, context, callback);
      });
    };
    get = function(id, callback) {
      return db.jsonld.get(id, {
        '@context': context
      }, function(error, group) {
        if (error) {
          return callback(error);
        } else {
          return callback(null, group);
        }
      });
    };
    getMembers = function(res, id, context) {
      return db.jsonld.get(id, {
        '@context': context
      }, function(err, obj) {
        return res.json(200, {
          data: obj['relations:members'],
          message: 'ok'
        });
      });
    };
    update = function(id, data, params, callback) {
      var error;
      data = alias(data, "type", "@type");
      data = hasType(data, "foaf:group");
      data = alias(data, "id", "@id");
      if (data["@id"] !== id) {
        error = new Error("id in route does not match id in data");
        error.status = 400;
        return callback(error);
      }
      return db.jsonld.put(data, function(error, group) {
        if (error) {
          return callback(error);
        }
        return compact(group, context, callback);
      });
    };
    remove = function(id, params, callback) {
      return db.jsonld.del(id, function(error) {
        if (error) {
          return callback(error);
        }
        return callback(null);
      });
    };
    find = Promise.promisify(find);
    create = Promise.promisify(create);
    get = Promise.promisify(get);
    getMembers = Promise.promisify(getMembers);
    update = Promise.promisify(update);
    remove = Promise.promisify(remove);
    app.get("/groups", function(req, res, next) {
      var defaultQuery, keys, query;
      query = req.query;
      keys = Object.keys(query);
      if (keys.length === 0) {
        defaultQuery = {
          subject: db.v('@id'),
          predicate: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
          object: "foaf:group"
        };
        find(defaultQuery).then(function(groups) {
          return res.json(200, groups);
        });
      } else if (keys.length > 1) {
        res.json(400, "GET /groups? only accepts 1 parameter key-value pair");
      } else {
        return expandSimpleQuery(query, context).then(find).then(function(groups) {
          return res.json(200, groups);
        });
      }
    });
    app.post("/groups", function(req, res, next) {
      var body;
      body = req.body;
      create(body, null).then(function(group) {
        return res.json(201, group);
      });
    });
    app.get("/groups/:id", function(req, res, next) {
      var id;
      id = urlencode.decode(req.params.id);
      expandGroupID(id, context).then(get).then(function(group) {
        if (group == null) {
          return res.json(404, null);
        } else {
          return res.json(200, group);
        }
      });
    });
    app.put("/groups/:id", function(req, res, next) {
      var body, id;
      id = urlencode.decode(req.params.id);
      body = req.body;
      expandGroupID(id, context).then(function(expandedIRI) {
        return update(expandedIRI, body, null);
      }).then(function(group) {
        return res.json(200, group);
      });
    });
    app["delete"]("/groups/:id", function(req, res, next) {
      var id;
      id = urlencode.decode(req.params.id);
      return expandGroupID(id, context).then(function(expandedIRI) {
        return remove(expandedIRI, null);
      }).done(function() {
        return res.json(204, null);
      });
    });
    app.get("/groups/:id/:subResource", function(req, res, next) {
      var id, subResource;
      id = urlencode.decode(req.params.id);
      subResource = req.params.subResource;
      return expandGroupID(id, context).then(get).then(function(group) {
        if (group == null) {
          return res.json(404, null);
        } else {
          return res.json(200, group[subResource]);
        }
      });
    });
    return app;
  };

}).call(this);
