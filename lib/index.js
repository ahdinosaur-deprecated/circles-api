// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, addContext, addDefaultPrefix, addTestData, alias, app, compact, context, create, db, deleteTestData, expand, expandGroupID, expandSimpleQuery, express, extractPredicateAndObject, find, get, getKey, getMembers, hasType, initData, jsonld, jsonldUtil, levelgraph, pair, update, urlencode, validator, _;

  express = require("express");

  levelgraph = require("levelgraph");

  urlencode = require("urlencode");

  validator = require("validator");

  Promise = require("bluebird");

  jsonld = Promise.promisifyAll(require("levelgraph-jsonld"));

  jsonldUtil = require("jsonld");

  _ = Promise.promisifyAll(require("lodash"));

  alias = require("./utils/alias");

  hasType = require("./utils/hasType");

  app = express();

  db = jsonld(levelgraph("../db"));

  initData = require("./initData");

  context = require("./context");

  app.use(require("body-parser")());

  addContext = function(term, context, callback) {
    var doc;
    doc = {};
    doc[term] = term;
    doc['@context'] = context;
    return callback(null, doc);
  };

  addDefaultPrefix = function(terms, context, callback) {
    var prefix;
    if (validator.isURL(terms[1])) {
      return callback(null, terms);
    } else if (terms[1].indexOf(':') === -1) {
      prefix = context[terms[0]]["defaultPrefix"];
      terms[1] = prefix + ":" + terms[1];
      return callback(null, terms);
    } else {
      return callback(null, terms);
    }
  };

  create = function(data, params, callback) {
    data = alias(data, "type", "@type");
    data = hasType(data, "foaf:group");
    data = alias(data, "id", "@id");
    return db.jsonld.put(data, function(err, group) {
      if (err) {
        return callback(err);
      }
      return compact(group, context, callback);
    });
  };

  expandGroupID = function(id, context, callback) {
    var terms;
    terms = ["group", id];
    return addDefaultPrefix(terms, context).then(function(terms) {
      return addContext(terms[1], context);
    }).then(expand).then(function(expanded) {
      return getKey(expanded[0]);
    }).then(function(expandedIRI) {
      return callback(null, expandedIRI);
    });
  };

  expandSimpleQuery = function(query, context, callback) {
    return pair(query).then(function(terms) {
      return addDefaultPrefix(terms, context);
    }).map(function(term) {
      return addContext(term, context);
    }).map(function(doc) {
      return expand(doc);
    }).then(extractPredicateAndObject).then(function(expanded) {
      var simpleQuery;
      simpleQuery = {
        subject: db.v('@id'),
        predicate: expanded.predicate,
        object: expanded.object
      };
      return callback(null, simpleQuery);
    });
  };

  extractPredicateAndObject = function(terms, callback) {
    var expanded;
    expanded = {
      predicate: Object.keys(terms[0][0])[0],
      object: Object.keys(terms[1][0])[0]
    };
    return callback(null, expanded);
  };

  find = function(query, callback) {
    console.log(query);
    return db.search(query, function(error, groups) {
      if (error) {
        return callback(error);
      } else {
        return callback(null, groups);
      }
    });
  };

  get = function(id, callback) {
    return db.jsonld.get(id, {
      '@context': context
    }, function(error, group) {
      if (error) {
        return callback(error);
      } else {
        return callback(null, group);
      }
    });
  };

  getKey = function(obj, callback) {
    var key;
    key = Object.keys(obj)[0];
    return callback(null, key);
  };

  pair = function(obj, callback) {
    var key, terms, value;
    key = Object.keys(obj)[0];
    value = obj[key];
    terms = [key, value];
    return callback(null, terms);
  };

  update = function(id, data, params, callback) {
    var err;
    data = alias(data, "type", "@type");
    data = hasType(data, "foaf:group");
    data = alias(data, "id", "@id");
    if (data["@id"] !== id) {
      err = new Error("id in route does not match id in data");
      err.status = 400;
      return callback(err);
    }
    return db.jsonld.put(data, function(err, group) {
      if (err) {
        return callback(err);
      }
      return compact(group, context, callback);
    });
  };

  addContext = Promise.promisify(addContext);

  addDefaultPrefix = Promise.promisify(addDefaultPrefix);

  compact = Promise.promisify(jsonldUtil.compact);

  create = Promise.promisify(create);

  expand = Promise.promisify(jsonldUtil.expand);

  expandGroupID = Promise.promisify(expandGroupID);

  expandSimpleQuery = Promise.promisify(expandSimpleQuery);

  extractPredicateAndObject = Promise.promisify(extractPredicateAndObject);

  find = Promise.promisify(find);

  get = Promise.promisify(get);

  getKey = Promise.promisify(getKey);

  pair = Promise.promisify(pair);

  update = Promise.promisify(update);

  app.get("/", function(req, res, next) {
    return addTestData(res);
  });

  app.get("/groups", function(req, res, next) {
    var defaultQuery, keys, query;
    query = req.query;
    keys = Object.keys(query);
    if (keys.length === 0) {
      defaultQuery = {
        subject: db.v('@id'),
        predicate: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        object: "foaf:group"
      };
      find(defaultQuery).then(function(groups) {
        return res.json(200, groups);
      });
    } else if (keys.length > 1) {
      res.json(400, "GET /groups? only accepts 1 parameter key-value pair");
    } else {
      return expandSimpleQuery(query, context).then(find).then(function(groups) {
        return res.json(200, groups);
      });
    }
  });

  app.post("/groups", function(req, res, next) {
    var body;
    body = req.body;
    create(body, null).then(function(group) {
      console.log('group from post', group);
      return res.json(201, group);
    });
  });

  app.get("/groups/:id", function(req, res, next) {
    var id;
    id = urlencode.decode(req.params.id);
    expandGroupID(id, context).then(get).then(function(group) {
      return res.json(200, group);
    });
  });

  app.put("/groups/:id", function(req, res, next) {
    var body, id;
    id = urlencode.decode(req.params.id);
    body = req.body;
    expandGroupID(id, context).then(function(expandedIRI) {
      return update(expandedIRI, body, null);
    }).then(function(group) {
      return res.json(200, group);
    });
  });

  app["delete"]("/groups/:id", function(req, res, next) {
    var id;
    id = req.params.id;
    db.jsonld.del(id, function(error) {
      return console.log('deleted ' + id);
    });
    return res.json(200, {
      name: "DELETE /groups/" + id
    });
  });

  app.get("/groups/:id/members", function(req, res, next) {
    var id;
    id = validator.isURL(id) ? req.params.id : "http://circles.app.enspiral.com/" + req.params.id;
    return getMembers(res, id, context);
  });

  getMembers = function(res, id, context) {
    return db.jsonld.get(id, {
      '@context': context
    }, function(err, obj) {
      return res.json(200, {
        data: obj['relations:members'],
        message: 'ok'
      });
    });
  };

  addTestData = function(res) {
    return initData.forEach(function(d, i) {
      return db.jsonld.put(d, function(err, obj) {
        if (i === initData.length - 1) {
          return res.json(200, {
            data: initData,
            message: 'test data added'
          });
        }
      });
    });
  };

  deleteTestData = function(res) {
    return db.jsonld.del("http://circles.app.enspiral.com/loomiocommunity", function(error) {
      return res.json(200, {
        data: [],
        message: "data base deleted"
      });
    });
  };

  module.exports = app;

}).call(this);
