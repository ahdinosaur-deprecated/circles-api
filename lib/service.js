// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, config, context, jsonld, levelgraph, levelgraphJsonld, service, utils;

  levelgraph = require('levelgraph');

  levelgraphJsonld = require('levelgraph-jsonld');

  Promise = require('bluebird');

  jsonld = require('jsonld');

  jsonld = jsonld.promises();

  utils = require('./utils/');

  context = require('./context');

  config = require('./config');

  module.exports = service = function(db) {
    var create, find, get, remove, update;
    db = levelgraphJsonld(levelgraph(db));
    find = function(params, callback) {
      var defaultQuery, keys, query;
      query = (params && params.query) || {};
      keys = Object.keys(query);
      if (keys.length === 0) {
        defaultQuery = {
          subject: db.v('@id'),
          predicate: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
          object: config.entity.type
        };
        return find({
          query: defaultQuery
        }, callback);
      }
      return db.search(query, function(error, circles) {
        if (error) {
          return callback(error);
        }
        return callback(null, circles);
      });
    };
    create = function(data, params, callback) {
      data = utils.normalizeData(config, data);
      return db.jsonld.put(data, function(error, group) {
        if (error) {
          return callback(error);
        }
        return jsonld.compact(group, context, callback);
      });
    };
    get = function(id, params, callback) {
      id = utils.normalizeID(config, id);
      return db.jsonld.get(id, context, function(error, group) {
        if (error) {
          return callback(error);
        }
        if (!group) {
          error = new Error("group " + id + " not found.");
          error.status = 404;
          return callback(error);
        }
        return callback(null, group);
      });
    };
    update = function(id, data, params, callback) {
      var error;
      id = utils.normalizeID(config, id);
      data = utils.normalizeData(config, data);
      if (data["@id"] !== id) {
        error = new Error("id in route does not match id in data");
        error.status = 400;
        return callback(error);
      }
      return db.jsonld.put(data, function(error, group) {
        if (error) {
          return callback(error);
        }
        return jsonld.compact(group, context, callback);
      });
    };
    remove = function(id, params, callback) {
      id = utils.normalizeID(config, id);
      return db.jsonld.del(id, function(error) {
        if (error) {
          return callback(error);
        }
        return callback(null);
      });
    };
    return {
      find: find,
      get: get,
      create: create,
      update: update,
      remove: remove
    };
  };

}).call(this);
